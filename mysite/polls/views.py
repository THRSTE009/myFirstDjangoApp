from django.http import HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.urls import reverse
from django.views import generic
from django.utils import timezone

from .models import Choice, Question

# Views must return either an HttpResponse object, containing the content for the requested page, or raise an exception, such as Http404.

# To call the view, map it to a URL via the URLconf.
# def index(request):
#     latest_question_list = Question.objects.order_by('-pub_date')[:5]
#     context = { 'latest_question_list': latest_question_list } # Context is a dictionary mapping template variable names to Python objects.
#     return render(request, 'polls/index.html', context) # render(request object, template name, dictionary(optional))

# The ListView generic view uses a default template called <app name>/<model name>_list.html;
# We use template_name to tell ListView to use our existing "polls/index.html" template.
class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'
    # For DetailView the question variable is provided automatically – since we’re using a Django model (Question),
    # Django is able to determine an appropriate name for the context variable. However, for ListView,
    # the automatically generated context variable is question_list.
    # To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead.
    # As an alternative approach, you could change your templates to match the new default context variables –
    # but it’s a lot easier to tell Django to use the variable you want.

    def get_queryset(self):
        """Return he last five published questions (not including those set to be published in the future). """
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]
        # returns a queryset containing Questions whose pub_date is earlier(less than) or equal to timezone.now.

# The DetailView generic view expects the primary key value captured from the URL to be called "pk", so we’ve changed question_id to pk for the generic views.
# By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html.
# In our case, it would use the template "polls/question_detail.html".
class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'

    def get_queryset(self):
        """ Excludes any questions that are not published yet. """
        return Question.objects.filter(pub_date__lte=timezone.now())

# The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name.
# We also specify the template_name for the results list view –
# this ensures that the results view and the detail view have a different appearance when rendered, even though they’re both a DetailView behind the scenes.
class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'

# def detail(request, question_id):
#     # try:
#     #     question = Question.objects.get(pk=question_id) #if a question with this idea does not exist then the view will raise the Http404 exception.
#     # except Question.DoesNotExist:
#     #     raise Http404("Question does not exist")
#
#     #faster method to raise Http404 is:
#     question = get_object_or_404(Question, pk=question_id)
#         # get_object_or_404 acts as a helper function.
#         # It's used to decouple the 'model layer' from the 'view layer'. I.e. The model API raises Http404.
#         # get_object_or_404('takes a Django model', 'takes an arbitrary number of keyword arguments')
#         # these arguments are passed to the model's manager get() which raises Http404 if the object does not exist.
#     return render(request, 'polls/detail.html', {'question': question})

# def results(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     return render(request,'polls/results.html', {'question': question})

# class ChartsView(generic.ListView):
#     template_name = 'polls/charts.html'

def chartsView(request):
    #  latest_question_list = Question.objects.order_by('-pub_date')[:5]
    #  context = { 'latest_question_list': latest_question_list } # Context is a dictionary mapping template variable names to Python objects.
    return render(request, 'polls/charts.html')
        
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
        # request.POST is a dictionary-like object that lets you access submitted data by key name.
        # In this case, request.POST['choice'] returns the ID of the selected choice, as a string.
        # request.POST values are always strings.
    except (KeyError, Choice.DoesNotExist): # Redisplay the question voting form.
        # request.POST['choice'] will raise KeyError if choice wasn’t provided in POST data.
        # The code checks for KeyError and redisplays the question form with an error message if choice isn’t given.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You did not select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
    # Always return an HttpResponseRedirect after successfully dealing
    # with POST data. This prevents data from being posted twice if a
    # user hits the Back button.

    # After incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse.
    # HttpResponseRedirect takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).

    # reverse() helps avoid having to hardcode a URL in the view function.
    # It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view.
